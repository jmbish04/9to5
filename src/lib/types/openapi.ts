/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/": {
    /** Landing page with platform documentation */
    get: operations["getLandingPage"];
  };
  "/openapi.json": {
    /** OpenAPI specification */
    get: operations["getOpenAPISpec"];
  };
  "/api/health": {
    /** Health check endpoint */
    get: operations["healthCheck"];
  };
  "/api/jobs": {
    /** List all jobs */
    get: operations["listJobs"];
  };
  "/api/jobs/{id}": {
    /** Get job by ID */
    get: operations["getJob"];
  };
  "/api/jobs/{id}/tracking": {
    /** Get job tracking history */
    get: operations["getJobTracking"];
  };
  "/api/jobs/{id}/snapshots/{snapshotId}/content": {
    /** Get snapshot content from R2 storage */
    get: operations["getSnapshotContent"];
  };
  "/api/jobs/{id}/monitoring": {
    /** Update job monitoring settings */
    put: operations["updateJobMonitoring"];
  };
  "/api/monitoring/daily-run": {
    /** Manually trigger daily job monitoring */
    post: operations["triggerDailyMonitoring"];
  };
  "/api/monitoring/status": {
    /** Get monitoring status and statistics */
    get: operations["getMonitoringStatus"];
  };
  "/api/jobs/monitoring-queue": {
    /** Get list of jobs that need monitoring */
    get: operations["getMonitoringQueue"];
  };
  "/api/runs/discovery": {
    /** Start job discovery run */
    post: operations["startDiscoveryRun"];
  };
  "/api/runs/monitor": {
    /** Start job monitoring run */
    post: operations["startMonitorRun"];
  };
  "/api/agent/query": {
    /** Semantic job search using AI */
    get: operations["semanticJobSearch"];
  };
  "/api/cover-letter": {
    /** Generate AI-powered cover letter */
    post: operations["generateCoverLetter"];
  };
  "/api/resume": {
    /** Generate AI-optimized resume content */
    post: operations["generateResume"];
  };
  "/api/email/insights/send": {
    /** Send job insights email manually */
    post: operations["sendEmailInsights"];
  };
  "/api/email/logs": {
    /** Get email processing logs */
    get: operations["getEmailLogs"];
  };
  "/api/email/configs": {
    /** Get email configuration */
    get: operations["getEmailConfigs"];
    /** Update email configuration */
    put: operations["updateEmailConfigs"];
  };
  "/api/agents": {
    /** List all agent configurations */
    get: operations["listAgents"];
    /** Create new agent configuration */
    post: operations["createAgent"];
  };
  "/api/agents/{id}": {
    /** Get agent configuration by ID */
    get: operations["getAgent"];
    /** Update agent configuration */
    put: operations["updateAgent"];
    /** Delete agent configuration */
    delete: operations["deleteAgent"];
  };
  "/api/tasks": {
    /** List all task configurations */
    get: operations["listTasks"];
    /** Create new task configuration */
    post: operations["createTask"];
  };
  "/api/tasks/{id}": {
    /** Get task configuration by ID */
    get: operations["getTask"];
    /** Update task configuration */
    put: operations["updateTask"];
    /** Delete task configuration */
    delete: operations["deleteTask"];
  };
  "/api/workflows": {
    /** List all workflow configurations */
    get: operations["listWorkflows"];
    /** Create new workflow configuration */
    post: operations["createWorkflow"];
  };
  "/api/workflows/{id}": {
    /** Get workflow configuration by ID */
    get: operations["getWorkflow"];
    /** Update workflow configuration */
    put: operations["updateWorkflow"];
    /** Delete workflow configuration */
    delete: operations["deleteWorkflow"];
  };
  "/api/workflows/{id}/execute": {
    /** Execute a workflow */
    post: operations["executeWorkflow"];
  };
  "/api/applicant/history": {
    /** Submit job history for AI processing */
    post: operations["submitJobHistory"];
  };
  "/api/applicant/{user_id}/history": {
    /** Get applicant's job history and profile */
    get: operations["getJobHistory"];
  };
  "/api/applicant/job-rating": {
    /** Generate AI-powered job fit rating */
    post: operations["generateJobRating"];
  };
  "/api/applicant/{user_id}/job-ratings": {
    /** Get all job ratings for an applicant */
    get: operations["getJobRatings"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Job: {
      id?: string;
      site_id?: string;
      /** Format: uri */
      url?: string;
      /** Format: uri */
      canonical_url?: string;
      title?: string;
      company?: string;
      location?: string;
      employment_type?: string;
      department?: string;
      salary_min?: number;
      salary_max?: number;
      salary_currency?: string;
      /**
       * @description Source of job discovery
       * @enum {string}
       */
      source?: "SCRAPED" | "EMAIL" | "MANUAL";
      /** @enum {string} */
      status?: "open" | "closed";
      /** Format: date-time */
      posted_at?: string;
      /** Format: date-time */
      first_seen_at?: string;
      /** Format: date-time */
      last_crawled_at?: string;
    };
    AgentConfig: {
      id: string;
      name: string;
      role: string;
      goal: string;
      backstory: string;
      llm: string;
      system_prompt?: string;
      /** @default 4000 */
      max_tokens?: number;
      /** @default 0.7 */
      temperature?: number;
      /** @default true */
      enabled?: boolean;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    TaskConfig: {
      id: string;
      name: string;
      description: string;
      expected_output: string;
      agent_id: string;
      /** @description Array of task IDs this task depends on */
      context_tasks?: string[];
      output_schema?: Record<string, never>;
      /** @default true */
      enabled?: boolean;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    WorkflowConfig: {
      id: string;
      name: string;
      description: string;
      /** @description Array of task IDs in execution order */
      task_sequence: string[];
      /** @default true */
      enabled?: boolean;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    EmailConfig: {
      id?: string;
      name?: string;
      /** @default true */
      enabled?: boolean;
      /** @default 24 */
      frequency_hours?: number;
      /** Format: email */
      recipient_email?: string;
      /** @default true */
      include_new_jobs?: boolean;
      /** @default true */
      include_job_changes?: boolean;
      /** @default true */
      include_statistics?: boolean;
      /** Format: date-time */
      last_sent_at?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    CoverLetterRequest: {
      job_title: string;
      company_name: string;
      hiring_manager_name?: string;
      job_description_text: string;
      candidate_career_summary: string;
    };
    ResumeRequest: {
      job_title: string;
      company_name: string;
      job_description_text: string;
      candidate_career_summary: string;
    };
    Error: {
      error?: string;
      message?: string;
    };
    Snapshot: {
      id?: string;
      job_id?: string;
      run_id?: string;
      content_hash?: string;
      html_r2_key?: string;
      json_r2_key?: string;
      screenshot_r2_key?: string;
      pdf_r2_key?: string;
      markdown_r2_key?: string;
      /** Format: date-time */
      fetched_at?: string;
      http_status?: number;
      etag?: string;
    };
    Change: {
      id?: string;
      job_id?: string;
      from_snapshot_id?: string;
      to_snapshot_id?: string;
      diff_json?: string;
      semantic_summary?: string;
      /** Format: date-time */
      changed_at?: string;
    };
    JobTrackingHistory: {
      id?: string;
      job_id?: string;
      snapshot_id?: string;
      /** Format: date */
      tracking_date?: string;
      /** @enum {string} */
      status?: "open" | "closed" | "modified" | "error";
      content_hash?: string;
      title_changed?: boolean;
      requirements_changed?: boolean;
      salary_changed?: boolean;
      description_changed?: boolean;
      error_message?: string;
      /** Format: date-time */
      created_at?: string;
    };
    JobMarketStats: {
      id?: string;
      /** Format: date */
      date?: string;
      total_jobs_tracked?: number;
      new_jobs_found?: number;
      jobs_closed?: number;
      jobs_modified?: number;
      avg_job_duration_days?: number;
      /** @description JSON array of top companies */
      top_companies?: string;
      /** @description JSON array of trending keywords */
      trending_keywords?: string;
      /** @description JSON object with salary statistics */
      salary_stats?: string;
      /** @description JSON object with location statistics */
      location_stats?: string;
      /** Format: date-time */
      created_at?: string;
    };
    DailyMonitoringResult: {
      /** Format: date */
      date?: string;
      jobs_checked?: number;
      jobs_modified?: number;
      jobs_closed?: number;
      errors?: number;
      snapshots_created?: number;
      pdfs_generated?: number;
      markdown_extracts?: number;
    };
    JobHistoryEntry: {
      id?: string;
      applicant_id?: string;
      company_name?: string;
      job_title?: string;
      job_description?: string;
      employment_type?: string;
      location?: string;
      salary_range?: string;
      /** Format: date */
      start_date?: string;
      /** Format: date */
      end_date?: string;
      current_position?: boolean;
      key_responsibilities?: string[];
      achievements?: string[];
      skills_used?: string[];
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    ApplicantProfile: {
      id?: string;
      user_id?: string;
      name?: string;
      /** Format: email */
      email?: string;
      phone?: string;
      location?: string;
      experience_years?: number;
      current_role?: string;
      skills?: string[];
      education?: string;
      career_summary?: string;
      preferences?: {
        work_style?: string;
        location_preferences?: string[];
        salary_range?: {
          min?: number;
          max?: number;
          currency?: string;
        };
        remote_ok?: boolean;
        employment_type?: string;
      };
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    JobHistorySubmission: {
      id?: string;
      user_id?: string;
      applicant_id?: string;
      raw_content?: string;
      content_type?: string;
      /** @enum {string} */
      processing_status?: "pending" | "processing" | "completed" | "failed";
      entries_processed?: number;
      error_message?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    JobRating: {
      id?: string;
      user_id?: string;
      job_id?: string;
      overall_fit_score?: number;
      skill_match_score?: number;
      experience_match_score?: number;
      salary_match_score?: number;
      location_match_score?: number;
      culture_match_score?: number;
      fit_explanation?: string;
      highlighted_skills?: string[];
      missing_skills?: string[];
      strengths?: string[];
      concerns?: string[];
      /** @enum {string} */
      recommendation?: "apply" | "maybe" | "skip";
      confidence_score?: number;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      updated_at?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Landing page with platform documentation */
  getLandingPage: {
    responses: {
      /** @description HTML documentation page */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /** OpenAPI specification */
  getOpenAPISpec: {
    responses: {
      /** @description OpenAPI 3.1.0 specification */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** Health check endpoint */
  healthCheck: {
    responses: {
      /** @description Service health status */
      200: {
        content: {
          "application/json": {
            status?: string;
            /** Format: date-time */
            timestamp?: string;
          };
        };
      };
    };
  };
  /** List all jobs */
  listJobs: {
    parameters: {
      query?: {
        limit?: number;
        offset?: number;
        status?: "open" | "closed";
        source?: "SCRAPED" | "EMAIL" | "MANUAL";
      };
    };
    responses: {
      /** @description List of jobs */
      200: {
        content: {
          "application/json": components["schemas"]["Job"][];
        };
      };
    };
  };
  /** Get job by ID */
  getJob: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Job details */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      /** @description Job not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get job tracking history */
  getJobTracking: {
    parameters: {
      path: {
        /** @description Job ID */
        id: string;
      };
    };
    responses: {
      /** @description Job tracking timeline with snapshots and changes */
      200: {
        content: {
          "application/json": {
            job?: components["schemas"]["Job"];
            timeline?: components["schemas"]["JobTrackingHistory"][];
            snapshots?: components["schemas"]["Snapshot"][];
            changes?: components["schemas"]["Change"][];
          };
        };
      };
      /** @description Job not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get snapshot content from R2 storage */
  getSnapshotContent: {
    parameters: {
      query?: {
        /** @description Content type to retrieve */
        type?: "html" | "pdf" | "markdown" | "json" | "screenshot";
      };
      path: {
        /** @description Job ID */
        id: string;
        /** @description Snapshot ID */
        snapshotId: string;
      };
    };
    responses: {
      /** @description Snapshot content */
      200: {
        content: {
          "text/html": string;
          "application/pdf": string;
          "text/markdown": string;
          "application/json": Record<string, never>;
          "image/png": string;
        };
      };
      /** @description Snapshot or content not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Update job monitoring settings */
  updateJobMonitoring: {
    parameters: {
      path: {
        /** @description Job ID */
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          daily_monitoring_enabled?: boolean;
          monitoring_frequency_hours?: number;
        };
      };
    };
    responses: {
      /** @description Updated job with monitoring settings */
      200: {
        content: {
          "application/json": components["schemas"]["Job"];
        };
      };
      /** @description Job not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Manually trigger daily job monitoring */
  triggerDailyMonitoring: {
    responses: {
      /** @description Daily monitoring results */
      200: {
        content: {
          "application/json": components["schemas"]["DailyMonitoringResult"];
        };
      };
    };
  };
  /** Get monitoring status and statistics */
  getMonitoringStatus: {
    responses: {
      /** @description Monitoring status and recent activity */
      200: {
        content: {
          "application/json": {
            active_jobs_monitored?: number;
            jobs_needing_check?: number;
            /** Format: date-time */
            last_updated?: string;
            recent_activity?: {
                tracking_date?: string;
                jobs_checked?: number;
                jobs_modified?: number;
                jobs_closed?: number;
                errors?: number;
              }[];
            market_statistics?: components["schemas"]["JobMarketStats"][];
          };
        };
      };
    };
  };
  /** Get list of jobs that need monitoring */
  getMonitoringQueue: {
    parameters: {
      query?: {
        /** @description Maximum number of jobs to return */
        limit?: number;
      };
    };
    responses: {
      /** @description Jobs needing monitoring */
      200: {
        content: {
          "application/json": {
            total_jobs?: number;
            returned_jobs?: number;
            jobs?: components["schemas"]["Job"][];
          };
        };
      };
    };
  };
  /** Start job discovery run */
  startDiscoveryRun: {
    requestBody?: {
      content: {
        "application/json": {
          config_id?: string;
        };
      };
    };
    responses: {
      /** @description Discovery run started */
      200: {
        content: {
          "application/json": {
            run_id?: string;
            status?: string;
          };
        };
      };
    };
  };
  /** Start job monitoring run */
  startMonitorRun: {
    responses: {
      /** @description Monitor run started */
      200: {
        content: {
          "application/json": {
            run_id?: string;
            status?: string;
          };
        };
      };
    };
  };
  /** Semantic job search using AI */
  semanticJobSearch: {
    parameters: {
      query: {
        /** @description Search query for semantic job matching */
        q: string;
      };
    };
    responses: {
      /** @description Matching jobs with relevance scores */
      200: {
        content: {
          "application/json": (components["schemas"]["Job"] & {
              relevance_score?: number;
            })[];
        };
      };
    };
  };
  /** Generate AI-powered cover letter */
  generateCoverLetter: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoverLetterRequest"];
      };
    };
    responses: {
      /** @description Generated cover letter */
      200: {
        content: {
          "application/json": {
            cover_letter?: string;
            html?: string;
          };
        };
      };
    };
  };
  /** Generate AI-optimized resume content */
  generateResume: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ResumeRequest"];
      };
    };
    responses: {
      /** @description Generated resume content */
      200: {
        content: {
          "application/json": {
            summary?: string;
            experience_bullets?: string[];
            skills?: string[];
          };
        };
      };
    };
  };
  /** Send job insights email manually */
  sendEmailInsights: {
    responses: {
      /** @description Email sent successfully */
      200: {
        content: {
          "application/json": {
            success?: boolean;
            message?: string;
          };
        };
      };
    };
  };
  /** Get email processing logs */
  getEmailLogs: {
    parameters: {
      query?: {
        limit?: number;
      };
    };
    responses: {
      /** @description Email processing logs */
      200: {
        content: {
          "application/json": {
            logs?: {
                id?: string;
                from_email?: string;
                subject?: string;
                job_links_extracted?: number;
                jobs_processed?: number;
                status?: string;
                /** Format: date-time */
                received_at?: string;
              }[];
            pagination?: {
              limit?: number;
              offset?: number;
              total?: number;
            };
          };
        };
      };
    };
  };
  /** Get email configuration */
  getEmailConfigs: {
    responses: {
      /** @description Email configurations */
      200: {
        content: {
          "application/json": {
            configs?: components["schemas"]["EmailConfig"][];
          };
        };
      };
    };
  };
  /** Update email configuration */
  updateEmailConfigs: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EmailConfig"];
      };
    };
    responses: {
      /** @description Configuration updated */
      200: {
        content: {
          "application/json": {
            success?: boolean;
          };
        };
      };
    };
  };
  /** List all agent configurations */
  listAgents: {
    parameters: {
      query?: {
        enabled?: boolean;
      };
    };
    responses: {
      /** @description List of agent configurations */
      200: {
        content: {
          "application/json": components["schemas"]["AgentConfig"][];
        };
      };
    };
  };
  /** Create new agent configuration */
  createAgent: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgentConfig"];
      };
    };
    responses: {
      /** @description Agent created */
      201: {
        content: {
          "application/json": components["schemas"]["AgentConfig"];
        };
      };
    };
  };
  /** Get agent configuration by ID */
  getAgent: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Agent configuration */
      200: {
        content: {
          "application/json": components["schemas"]["AgentConfig"];
        };
      };
      /** @description Agent not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Update agent configuration */
  updateAgent: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AgentConfig"];
      };
    };
    responses: {
      /** @description Agent updated */
      200: {
        content: {
          "application/json": components["schemas"]["AgentConfig"];
        };
      };
    };
  };
  /** Delete agent configuration */
  deleteAgent: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Agent deleted */
      204: {
        content: never;
      };
      /** @description Agent not found */
      404: {
        content: never;
      };
    };
  };
  /** List all task configurations */
  listTasks: {
    parameters: {
      query?: {
        enabled?: boolean;
        agent_id?: string;
      };
    };
    responses: {
      /** @description List of task configurations */
      200: {
        content: {
          "application/json": components["schemas"]["TaskConfig"][];
        };
      };
    };
  };
  /** Create new task configuration */
  createTask: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskConfig"];
      };
    };
    responses: {
      /** @description Task created */
      201: {
        content: {
          "application/json": components["schemas"]["TaskConfig"];
        };
      };
    };
  };
  /** Get task configuration by ID */
  getTask: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Task configuration */
      200: {
        content: {
          "application/json": components["schemas"]["TaskConfig"];
        };
      };
      /** @description Task not found */
      404: {
        content: never;
      };
    };
  };
  /** Update task configuration */
  updateTask: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskConfig"];
      };
    };
    responses: {
      /** @description Task updated */
      200: {
        content: {
          "application/json": components["schemas"]["TaskConfig"];
        };
      };
    };
  };
  /** Delete task configuration */
  deleteTask: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Task deleted */
      204: {
        content: never;
      };
    };
  };
  /** List all workflow configurations */
  listWorkflows: {
    parameters: {
      query?: {
        enabled?: boolean;
      };
    };
    responses: {
      /** @description List of workflow configurations */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowConfig"][];
        };
      };
    };
  };
  /** Create new workflow configuration */
  createWorkflow: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowConfig"];
      };
    };
    responses: {
      /** @description Workflow created */
      201: {
        content: {
          "application/json": components["schemas"]["WorkflowConfig"];
        };
      };
    };
  };
  /** Get workflow configuration by ID */
  getWorkflow: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Workflow configuration */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowConfig"];
        };
      };
    };
  };
  /** Update workflow configuration */
  updateWorkflow: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["WorkflowConfig"];
      };
    };
    responses: {
      /** @description Workflow updated */
      200: {
        content: {
          "application/json": components["schemas"]["WorkflowConfig"];
        };
      };
    };
  };
  /** Delete workflow configuration */
  deleteWorkflow: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description Workflow deleted */
      204: {
        content: never;
      };
    };
  };
  /** Execute a workflow */
  executeWorkflow: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description Input context for workflow execution */
          context?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description Workflow execution started */
      200: {
        content: {
          "application/json": {
            execution_id?: string;
            status?: string;
          };
        };
      };
    };
  };
  /** Submit job history for AI processing */
  submitJobHistory: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Unique identifier for the applicant */
          user_id: string;
          /** @description Job history content in any format (plaintext, markdown, JSON, etc.) */
          raw_content: string;
          /**
           * @description Hint about the content format
           * @default text/plain
           * @enum {string}
           */
          content_type?: "text/plain" | "text/markdown" | "application/json";
        };
      };
    };
    responses: {
      /** @description Job history processed successfully */
      200: {
        content: {
          "application/json": {
            success?: boolean;
            submission_id?: string;
            applicant_id?: string;
            entries_processed?: number;
            entries?: components["schemas"]["JobHistoryEntry"][];
          };
        };
      };
    };
  };
  /** Get applicant's job history and profile */
  getJobHistory: {
    parameters: {
      path: {
        /** @description Unique identifier for the applicant */
        user_id: string;
      };
    };
    responses: {
      /** @description Applicant profile and job history */
      200: {
        content: {
          "application/json": {
            applicant?: components["schemas"]["ApplicantProfile"];
            job_history?: components["schemas"]["JobHistoryEntry"][];
            submissions?: components["schemas"]["JobHistorySubmission"][];
          };
        };
      };
    };
  };
  /** Generate AI-powered job fit rating */
  generateJobRating: {
    requestBody: {
      content: {
        "application/json": {
          /** @description Unique identifier for the applicant */
          user_id: string;
          /** @description Job ID to rate fit against */
          job_id: string;
        };
      };
    };
    responses: {
      /** @description Job fit rating generated */
      200: {
        content: {
          "application/json": components["schemas"]["JobRating"];
        };
      };
    };
  };
  /** Get all job ratings for an applicant */
  getJobRatings: {
    parameters: {
      path: {
        /** @description Unique identifier for the applicant */
        user_id: string;
      };
    };
    responses: {
      /** @description List of job ratings */
      200: {
        content: {
          "application/json": components["schemas"]["JobRating"][];
        };
      };
    };
  };
}
