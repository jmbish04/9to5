---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getJob, getJobTracking, updateJobMonitoring, fmtDateTime } from '../../../lib/api';
import { Badge } from '../../../components/ui/badge';
import { Button } from '../../../components/ui/button';
import { Input } from '../../../components/ui/input';

const { id } = Astro.params;

const [job, tracking] = await Promise.all([
  getJob(id),
  getJobTracking(id)
]);

// compress stable periods (same content_hash across consecutive 'checked')
function compress(timeline) {
  const out = [];
  let i = 0;
  while (i < timeline.length) {
    const start = timeline[i];
    if (start.status !== 'checked' || !start.content_hash) {
      out.push({ type: 'point', entry: start });
      i++;
      continue;
    }
    let j = i + 1;
    while (
      j < timeline.length &&
      timeline[j].status === 'checked' &&
      timeline[j].content_hash === start.content_hash
    ) j++;
    const end = timeline[j - 1];
    const days = Math.max(1, Math.ceil((new Date(end.tracking_date).getTime() - new Date(start.tracking_date).getTime()) / 86400000) + 1);
    out.push({ type: 'stable', from: start, to: end, days });
    i = j;
  }
  return out;
}
const compressed = compress(tracking.timeline || []);
---
<AdminLayout>
  <div class="mb-4">
    <div class="text-lg font-semibold">{job.title || 'Untitled'}</div>
    <div class="text-sm text-neutral-600">{job.company || '—'} · {job.location || '—'} · {job.employment_type || '—'}</div>
    <div class="mt-2">
      {job.source ? <Badge client:only="react" variant={job.source === 'EMAIL' ? 'accent' : job.source === 'MANUAL' ? 'secondary' : 'info'}>{job.source}</Badge> : null}
    </div>
  </div>

  <section class="mb-6 rounded-lg border border-neutral-200 bg-white p-4">
    <h3 class="mb-3 text-sm font-semibold">Monitoring Settings</h3>
    <form
      onsubmit="return false;"
      class="grid max-w-md grid-cols-2 items-end gap-3"
      id="monitoringForm"
    >
      <label class="col-span-2 flex items-center gap-2 text-sm">
        <input type="checkbox" id="monEnabled" />
        Daily monitoring enabled
      </label>
      <div>
        <div class="mb-1 text-xs text-neutral-600">Frequency (hours)</div>
        <Input id="monFreq" type="number" min="1" value="24" />
      </div>
      <div>
        <Button
          client:only="react"
          onClick={async () => {
            const enabled = (document.getElementById('monEnabled') as HTMLInputElement).checked;
            const freq = Number((document.getElementById('monFreq') as HTMLInputElement).value || '24');
            try {
              await updateJobMonitoring(String(id), { daily_monitoring_enabled: enabled, monitoring_frequency_hours: freq });
              alert('Monitoring updated');
              location.reload();
            } catch (e) {
              alert('Failed to update monitoring');
            }
          }}
        >Save Settings</Button>
      </div>
    </form>
  </section>

  <section class="rounded-lg border border-neutral-200 bg-white p-4">
    <h3 class="mb-3 text-sm font-semibold">Tracking Timeline</h3>
    <div class="space-y-2">
      {compressed.map((row) => (
        row.type === 'stable'
          ? <div class="rounded-md border border-neutral-200 bg-neutral-50 p-3 text-sm">
              Stable for {row.days} day(s): {row.from.tracking_date} → {row.to.tracking_date}
              <div class="text-xs text-neutral-600">hash {row.from.content_hash}</div>
            </div>
          : <div class="rounded-md border border-amber-200 bg-amber-50 p-3 text-sm">
              <div class="font-medium">Event: {row.entry.status}</div>
              {row.entry.change_summary ? <div class="mt-1 text-xs">{row.entry.change_summary}</div> : null}
              <div class="mt-1 text-xs text-neutral-600">{fmtDateTime(row.entry.created_at)}</div>
            </div>
      ))}
    </div>

    <div class="mt-6 text-xs text-neutral-500">
      Tip: snapshots & content viewer wire up in Milestone 2 (HTML/MD modal, PDF/PNG open-in-new-tab).
    </div>
  </section>
</AdminLayout>
