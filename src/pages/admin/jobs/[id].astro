---
import AdminLayout from '../../../layouts/AdminLayout.astro';
import { getJob, getJobTracking, fmtDateTime } from '../../../lib/api';
import { Badge } from '../../../components/ui/badge';
import { Button } from '../../../components/ui/button';
import { SnapshotViewer } from '../../../components/admin/SnapshotViewer';
import { MonitoringSettingsDialog } from '../../../components/admin/MonitoringSettingsDialog';
import InterestSignals from '../../../components/admin/InterestSignals';

const { id } = Astro.params;

let job = null;
let tracking = null;
let loadError = null;
try {
  [job, tracking] = await Promise.all([
    getJob(id),
    getJobTracking(id)
  ]);
} catch (e) {
  loadError = e;
}

// compress stable periods (same content_hash across consecutive 'checked')
function compress(timeline) {
  const out = [];
  let i = 0;
  while (i < timeline.length) {
    const start = timeline[i];
    if (start.status !== 'checked' || !start.snapshot_id) {
      out.push({ type: 'point', entry: start });
      i++;
      continue;
    }
    let j = i + 1;
    while (
      j < timeline.length &&
      timeline[j].status === 'checked' &&
      timeline[j].snapshot_id === start.snapshot_id
    ) j++;
    const end = timeline[j - 1];
    const days = Math.max(1, Math.ceil((new Date(end.tracking_date).getTime() - new Date(start.tracking_date).getTime()) / 86400000) + 1);
    out.push({ type: 'stable', from: start, to: end, days, snapshot_id: start.snapshot_id });
    i = j;
  }
  return out;
}
const compressed = compress(tracking?.timeline || []);
---
<AdminLayout>
  {loadError ? (
    <div class="text-red-700">Failed to load job.</div>
  ) : (
    <>
      <div class="mb-4">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <div class="text-lg font-semibold">{job.title || 'Untitled'}</div>
            <div class="text-sm text-neutral-600">{job.company || '—'} · {job.location || '—'} · {job.employment_type || '—'}</div>
            <div class="mt-2 flex items-center gap-2">
              {job.source ? <Badge client:only="react" variant={job.source === 'EMAIL' ? 'accent' : job.source === 'MANUAL' ? 'secondary' : 'info'}>{job.source}</Badge> : null}
              <InterestSignals client:load jobId={id} />
            </div>
          </div>
          {job.url && (
            <a 
              href={job.url} 
              target="_blank" 
              rel="noopener noreferrer"
              class="text-sm text-blue-600 hover:text-blue-900 underline ml-4"
            >
              View Original Job ↗
            </a>
          )}
        </div>
      </div>

      <section class="mb-6 rounded-lg border border-neutral-200 bg-white p-4">
        <div class="flex items-center justify-between mb-3">
          <h3 class="text-sm font-semibold">Monitoring Settings</h3>
          <div class="flex items-center gap-2">
            <div class="flex items-center gap-2 text-sm text-neutral-600">
              {job?.daily_monitoring_enabled ? (
                <Badge variant="secondary">Enabled ({job.monitoring_frequency_hours || 24}h)</Badge>
              ) : (
                <Badge variant="outline">Disabled</Badge>
              )}
            </div>
            <MonitoringSettingsDialog
              client:load
              job={job}
              onUpdate={() => location.reload()}
            />
          </div>
        </div>
        <div class="text-sm text-neutral-600">
          {job?.daily_monitoring_enabled 
            ? `This job is monitored every ${job.monitoring_frequency_hours || 24} hours for changes.`
            : 'Monitoring is currently disabled for this job.'
          }
        </div>
      </section>

      <section class="rounded-lg border border-neutral-200 bg-white p-4">
        <h3 class="mb-3 text-sm font-semibold">Tracking Timeline</h3>
        <div class="space-y-2">
          {compressed.map((row, index) => (
            row.type === 'stable'
              ? <div class="rounded-md border border-neutral-200 bg-neutral-50 p-3">
                  <div class="flex items-center justify-between">
                    <div class="text-sm">
                      <div class="font-medium">Stable for {row.days} day(s)</div>
                      <div class="text-xs text-neutral-600 mt-1">
                        {fmtDateTime(row.from.tracking_date)} → {fmtDateTime(row.to.tracking_date)}
                      </div>
                    </div>
                    {row.snapshot_id && (
                      <div class="flex items-center gap-2">
                        <SnapshotViewer
                          client:load
                          jobId={id}
                          snapshotId={row.snapshot_id}
                          contentType={row.from.content_type || 'text/html'}
                          triggerText="View Snapshot"
                        />
                      </div>
                    )}
                  </div>
                </div>
              : <div class="rounded-md border border-amber-200 bg-amber-50 p-3">
                  <div class="flex items-center justify-between">
                    <div class="text-sm">
                      <div class="font-medium">Event: {row.entry.status}</div>
                      {row.entry.change_summary && (
                        <div class="mt-1 text-xs">{row.entry.change_summary}</div>
                      )}
                      <div class="mt-1 text-xs text-neutral-600">
                        {fmtDateTime(row.entry.tracking_date)}
                      </div>
                    </div>
                    {row.entry.snapshot_id && (
                      <div class="flex items-center gap-2">
                        <SnapshotViewer
                          client:load
                          jobId={id}
                          snapshotId={row.entry.snapshot_id}
                          contentType={row.entry.content_type || 'text/html'}
                          triggerText="View Snapshot"
                        />
                      </div>
                    )}
                  </div>
                </div>
          ))}
        </div>

        <div class="mt-6 text-xs text-neutral-500">
          Snapshots can be viewed inline for HTML/Markdown content. PDF and PNG files open in new tabs.
        </div>
      </section>

      {/* Job Fit Rating Section */}
      <section class="mt-6 rounded-lg border border-neutral-200 bg-white p-4">
        <h3 class="mb-3 text-sm font-semibold">Job Fit Rating</h3>
        <div class="space-y-4">
          <div class="text-sm text-neutral-600">
            Get an AI-powered assessment of how well this job matches your profile and experience.
          </div>
          
          <div class="flex gap-2">
            <Button
              client:only="react"
              onClick={async () => {
                try {
                  const ratingButton = document.querySelector('[data-rating-button]');
                  const resultDiv = document.querySelector('[data-rating-result]');
                  if (ratingButton) ratingButton.textContent = 'Generating...';
                  
                  const response = await fetch(`${window.location.origin}/api/applicant/job-rating`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      user_id: 'default-user',
                      job_id: '${id}'
                    })
                  });
                  
                  if (!response.ok) throw new Error('Failed to generate rating');
                  
                  const rating = await response.json();
                  
                  if (resultDiv) {
                    resultDiv.innerHTML = `
                      <div class="space-y-3">
                        <div class="flex items-center gap-2">
                          <span class="text-lg font-semibold">Overall Score: ${rating.overall_score || 'N/A'}/100</span>
                          <span class="px-2 py-1 rounded text-xs font-medium ${
                            (rating.overall_score || 0) >= 80 ? 'bg-green-100 text-green-800' :
                            (rating.overall_score || 0) >= 60 ? 'bg-yellow-100 text-yellow-800' :
                            'bg-red-100 text-red-800'
                          }">
                            ${(rating.overall_score || 0) >= 80 ? 'Excellent Match' :
                              (rating.overall_score || 0) >= 60 ? 'Good Match' : 'Poor Match'}
                          </span>
                        </div>
                        
                        ${rating.category_scores ? Object.entries(rating.category_scores).map(([category, score]) => `
                          <div class="flex justify-between items-center">
                            <span class="text-sm capitalize">${category.replace('_', ' ')}:</span>
                            <span class="text-sm font-medium">${score}/100</span>
                          </div>
                        `).join('') : ''}
                        
                        ${rating.reasoning ? `
                          <div class="mt-3 p-3 bg-neutral-50 rounded">
                            <div class="text-sm font-medium mb-2">Analysis:</div>
                            <div class="text-sm text-neutral-700">${rating.reasoning}</div>
                          </div>
                        ` : ''}
                        
                        ${rating.recommendations && rating.recommendations.length ? `
                          <div class="mt-3">
                            <div class="text-sm font-medium mb-2">Recommendations:</div>
                            <ul class="text-sm text-neutral-700 space-y-1">
                              ${rating.recommendations.map(rec => `<li>• ${rec}</li>`).join('')}
                            </ul>
                          </div>
                        ` : ''}
                      </div>
                    `;
                    resultDiv.classList.remove('hidden');
                  }
                  
                } catch (error) {
                  alert('Failed to generate job fit rating. Please try again.');
                  console.error('Rating error:', error);
                } finally {
                  if (ratingButton) ratingButton.textContent = 'Generate Job Fit Rating';
                }
              }}
              data-rating-button
            >
              Generate Job Fit Rating
            </Button>
          </div>
          
          <div data-rating-result class="hidden border-t pt-4"></div>
        </div>
      </section>
    </>
  )}
</AdminLayout>
