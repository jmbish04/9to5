---
import AdminLayout from '../../../layouts/AdminLayout.astro';

// Mock job data for demonstration
const mockJob = {
  id: 'demo-123',
  title: 'Senior Frontend Developer',
  company: 'TechCorp Inc.',
  location: 'San Francisco, CA',
  employment_type: 'Full-time',
  source: 'SCRAPED',
  daily_monitoring_enabled: true,
  monitoring_frequency_hours: 24
};

// Mock timeline data
const mockTimeline = [
  {
    type: 'stable',
    from: { 
      tracking_date: '2024-01-15T10:00:00Z',
      content_type: 'text/html'
    },
    to: { 
      tracking_date: '2024-01-20T10:00:00Z',
      content_type: 'text/html'
    },
    days: 5,
    snapshot_id: 'snapshot-1'
  },
  {
    type: 'point',
    entry: {
      status: 'changed',
      change_summary: 'Salary range updated',
      tracking_date: '2024-01-21T10:00:00Z',
      snapshot_id: 'snapshot-2',
      content_type: 'text/markdown'
    }
  },
  {
    type: 'stable',
    from: { 
      tracking_date: '2024-01-22T10:00:00Z',
      content_type: 'application/pdf'
    },
    to: { 
      tracking_date: '2024-01-25T10:00:00Z',
      content_type: 'application/pdf'
    },
    days: 3,
    snapshot_id: 'snapshot-3'
  }
];

function fmtDateTime(ts) {
  if (!ts) return '—';
  try {
    const d = new Date(ts);
    return d.toLocaleString('en-US', { timeZone: 'America/Los_Angeles' });
  } catch {
    return ts;
  }
}
---

<AdminLayout>
  <div class="mb-4">
    <div class="text-lg font-semibold">{mockJob.title}</div>
    <div class="text-sm text-neutral-600">{mockJob.company} · {mockJob.location} · {mockJob.employment_type}</div>
    <div class="mt-2">
      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">DEMO MODE</span>
      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800 ml-2">{mockJob.source}</span>
    </div>
  </div>

  <section class="mb-6 rounded-lg border border-neutral-200 bg-white p-4">
    <div class="flex items-center justify-between mb-3">
      <h3 class="text-sm font-semibold">Monitoring Settings</h3>
      <div class="flex items-center gap-2">
        <div class="flex items-center gap-2 text-sm text-neutral-600">
          {mockJob.daily_monitoring_enabled ? (
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">Enabled ({mockJob.monitoring_frequency_hours}h)</span>
          ) : (
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">Disabled</span>
          )}
        </div>
        <button class="px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700" onclick="alert('In demo mode - monitoring settings would be updated')">Settings</button>
      </div>
    </div>
    <div class="text-sm text-neutral-600">
      {mockJob.daily_monitoring_enabled 
        ? 'This job is monitored every ' + mockJob.monitoring_frequency_hours + ' hours for changes.'
        : 'Monitoring is currently disabled for this job.'
      }
    </div>
  </section>

  <section class="rounded-lg border border-neutral-200 bg-white p-4">
    <h3 class="mb-3 text-sm font-semibold">Tracking Timeline</h3>
    <div class="space-y-2">
      {mockTimeline.map((row, index) => (
        row.type === 'stable'
          ? <div class="rounded-md border border-neutral-200 bg-neutral-50 p-3">
              <div class="flex items-center justify-between">
                <div class="text-sm">
                  <div class="font-medium">Stable for {row.days} day(s)</div>
                  <div class="text-xs text-neutral-600 mt-1">
                    {fmtDateTime(row.from.tracking_date)} → {fmtDateTime(row.to.tracking_date)}
                  </div>
                </div>
                <div class="flex items-center gap-2">
                  <button class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700" onclick="alert('View Snapshot: ' + '{row.snapshot_id}')">View Snapshot</button>
                </div>
              </div>
            </div>
          : <div class="rounded-md border border-amber-200 bg-amber-50 p-3">
              <div class="flex items-center justify-between">
                <div class="text-sm">
                  <div class="font-medium">Event: {row.entry.status}</div>
                  {row.entry.change_summary && (
                    <div class="mt-1 text-xs">{row.entry.change_summary}</div>
                  )}
                  <div class="mt-1 text-xs text-neutral-600">
                    {fmtDateTime(row.entry.tracking_date)}
                  </div>
                </div>
                <div class="flex items-center gap-2">
                  <button class="px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700" onclick="alert('View Snapshot: ' + '{row.entry.snapshot_id}')">View Snapshot</button>
                </div>
              </div>
            </div>
      ))}
    </div>

    <div class="mt-6 p-4 border border-blue-200 bg-blue-50 rounded-md">
      <div class="text-sm">
        <div class="font-medium text-blue-800">Demo Features:</div>
        <ul class="mt-2 text-blue-700 list-disc list-inside">
          <li>Click "Settings" to see the monitoring configuration dialog</li>
          <li>Click "View Snapshot" buttons to see different content types:</li>
          <ul class="ml-6 list-disc list-inside">
            <li>HTML content displays inline with styling</li>
            <li>Markdown content shows in formatted text</li>
            <li>PDF files show a "Open in New Tab" dialog</li>
            <li>Image files also open in new tabs</li>
          </ul>
          <li>Compressed stable periods show duration and date ranges</li>
          <li>Change events are highlighted with different styling</li>
        </ul>
      </div>
    </div>
  </section>
</AdminLayout>