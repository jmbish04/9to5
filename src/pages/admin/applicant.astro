---
import AdminLayout from '../../layouts/AdminLayout.astro';
import { Textarea } from '../../components/ui/textarea';
import { Input } from '../../components/ui/input';
import Button from '../../components/ui/button.astro';
import Card from '../../components/ui/card.astro';
import CardHeader from '../../components/ui/card-header.astro';
import CardTitle from '../../components/ui/card-title.astro';
import CardContent from '../../components/ui/card-content.astro';
import {
  getApplicantHistory,
  submitApplicantHistory,
  createCoverLetter,
  createResume
} from '../../lib/api';

const USER_ID = 'default-user';

// Load existing profile + history
const { data: histData, error: histErr } = await (async () => {
  try { return { data: await getApplicantHistory(USER_ID), error: null }; }
  catch (e) { return { data: null, error: e }; }
})();
---
<AdminLayout>
  <div class="grid grid-cols-1 gap-4 xl:grid-cols-2">

    <Card>
      <CardHeader><CardTitle>Applicant Profile & History</CardTitle></CardHeader>
      <CardContent>
        {
          histErr
            ? <div class="text-sm text-red-700">Failed to load applicant data.</div>
            : histData
              ? (
                <div class="space-y-4">
                  <div class="text-sm">
                    <div><span class="font-medium">User:</span> {histData.applicant?.name || '—'} ({histData.applicant?.email || '—'})</div>
                    <div class="text-neutral-600 text-xs">
                      Title: {histData.applicant?.current_title || '—'} ·
                      Experience: {histData.applicant?.years_experience ?? '—'} yrs ·
                      Pref Remote: {histData.applicant?.preferences?.remote_preference || '—'}
                    </div>
                  </div>

                  <div>
                    <div class="mb-1 text-xs font-medium">Job History</div>
                    {
                      (histData.job_history?.length ?? 0) === 0
                        ? <div class="text-sm text-neutral-500">No history yet.</div>
                        : (
                          <div class="max-h-56 overflow-auto rounded border">
                            <table class="w-full text-sm">
                              <thead class="bg-neutral-50 text-neutral-600">
                                <tr>
                                  <th class="px-3 py-2 text-left">Company</th>
                                  <th class="px-3 py-2 text-left">Title</th>
                                  <th class="px-3 py-2 text-left">Dates</th>
                                  <th class="px-3 py-2 text-left">Location</th>
                                </tr>
                              </thead>
                              <tbody class="divide-y">
                                {histData.job_history.map((h) => (
                                  <tr>
                                    <td class="px-3 py-2">{h.company_name || '—'}</td>
                                    <td class="px-3 py-2">{h.job_title || '—'}</td>
                                    <td class="px-3 py-2">
                                      {h.start_date || '—'} → {h.is_current ? 'Present' : (h.end_date || '—')}
                                    </td>
                                    <td class="px-3 py-2">{h.location || '—'}</td>
                                  </tr>
                                ))}
                              </tbody>
                            </table>
                          </div>
                        )
                    }
                  </div>

                  <div>
                    <div class="mb-1 text-xs font-medium">Recent Submissions</div>
                    {
                      (histData.submissions?.length ?? 0) === 0
                        ? <div class="text-sm text-neutral-500">No submissions recorded.</div>
                        : (
                          <ul class="text-xs">
                            {histData.submissions.slice(0, 5).map((s) => (
                              <li class="mb-1">
                                <span class="font-medium">{s.processing_status}</span>
                                {s.processed_entries != null ? ` · entries: ${s.processed_entries}` : ''}
                                {s.processing_error ? ` · error: ${s.processing_error}` : ''}
                              </li>
                            ))}
                          </ul>
                        )
                    }
                  </div>
                </div>
              )
              : <div class="text-sm text-neutral-500">Loading…</div>
        }
      </CardContent>
    </Card>

    <Card>
      <CardHeader><CardTitle>Ingest Job History (Paste anything)</CardTitle></CardHeader>
      <CardContent>
        <div class="space-y-2">
          <div class="text-xs text-neutral-600">
            Paste plaintext, Markdown, or JSON. The agent will parse and normalize it into entries.
          </div>
          <label class="text-xs font-medium">Content</label>
          <Textarea id="historyContent" placeholder="Paste resume, markdown notes, bullets…" />
          <div class="grid grid-cols-2 gap-2">
            <div>
              <div class="mb-1 text-xs text-neutral-600">Content Type</div>
              <select id="historyType" class="h-9 w-full rounded-md border border-neutral-300 px-3 text-sm">
                <option value="text/plain">text/plain</option>
                <option value="text/markdown">text/markdown</option>
                <option value="application/json">application/json</option>
              </select>
            </div>
            <div class="flex items-end justify-end">
              <Button
                client:only="react"
                onClick={async () => {
                  const raw = (document.getElementById('historyContent') as HTMLTextAreaElement).value || '';
                  const ct = (document.getElementById('historyType') as HTMLSelectElement).value as any;
                  if (!raw.trim()) { alert('Please paste some content.'); return; }
                  try {
                    const res = await submitApplicantHistory({ user_id: 'default-user', raw_content: raw, content_type: ct });
                    alert(`Submitted. Entries processed: ${res.entries_processed ?? 0}`);
                    location.reload();
                  } catch (e) {
                    alert('Failed to submit history.');
                  }
                }}
              >Submit</Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>

    <Card class="xl:col-span-2">
      <CardHeader><CardTitle>AI Tools: Cover Letter & Resume</CardTitle></CardHeader>
      <CardContent>
        <div class="grid grid-cols-1 gap-4 md:grid-cols-2">
          <section class="space-y-2">
            <div class="text-sm font-medium">Cover Letter</div>
            <label class="text-xs">Job Title</label>
            <Input id="cl_job_title" placeholder="Head of Data" />
            <label class="text-xs">Company Name</label>
            <Input id="cl_company_name" placeholder="Acme Corp" />
            <label class="text-xs">Hiring Manager (optional)</label>
            <Input id="cl_hm" placeholder="Jane Doe" />
            <label class="text-xs">Job Description (paste)</label>
            <Textarea id="cl_jd" />
            <label class="text-xs">Your Career Summary</label>
            <Textarea id="cl_summary" placeholder="2–3 paragraphs or bullets summarizing your background" />
            <div class="flex gap-2">
              <Button
                client:only="react"
                onClick={async () => {
                  const b = {
                    job_title: (document.getElementById('cl_job_title') as HTMLInputElement).value,
                    company_name: (document.getElementById('cl_company_name') as HTMLInputElement).value,
                    hiring_manager_name: (document.getElementById('cl_hm') as HTMLInputElement).value || undefined,
                    job_description_text: (document.getElementById('cl_jd') as HTMLTextAreaElement).value,
                    candidate_career_summary: (document.getElementById('cl_summary') as HTMLTextAreaElement).value
                  };
                  if (!b.job_title || !b.company_name || !b.job_description_text || !b.candidate_career_summary) {
                    alert('Fill required fields.'); return;
                  }
                  try {
                    const res = await createCoverLetter(b);
                    const out = res.html || `<pre>${res.cover_letter}</pre>`;
                    const el = document.getElementById('cl_output')!;
                    el.innerHTML = out;
                    el.scrollIntoView({ behavior: 'smooth' });
                  } catch {
                    alert('Failed to generate cover letter.');
                  }
                }}
              >Generate</Button>
              <Button
                variant="secondary"
                client:only="react"
                onClick={() => {
                  const el = document.getElementById('cl_output');
                  if (!el) return;
                  const range = document.createRange();
                  range.selectNode(el);
                  const sel = window.getSelection();
                  sel?.removeAllRanges();
                  sel?.addRange(range);
                  document.execCommand('copy');
                  sel?.removeAllRanges();
                  alert('Copied cover letter to clipboard.');
                }}
              >Copy</Button>
            </div>
            <div id="cl_output" class="prose mt-2 max-w-none rounded border p-3 text-sm"></div>
          </section>

          <section class="space-y-2">
            <div class="text-sm font-medium">Resume Optimizer</div>
            <label class="text-xs">Job Title</label>
            <Input id="re_job_title" placeholder="Head of Data" />
            <label class="text-xs">Company Name</label>
            <Input id="re_company_name" placeholder="Acme Corp" />
            <label class="text-xs">Job Description (paste)</label>
            <Textarea id="re_jd" />
            <label class="text-xs">Your Career Summary</label>
            <Textarea id="re_summary" placeholder="Key highlights to emphasize" />
            <div class="flex gap-2">
              <Button
                client:only="react"
                onClick={async () => {
                  const b = {
                    job_title: (document.getElementById('re_job_title') as HTMLInputElement).value,
                    company_name: (document.getElementById('re_company_name') as HTMLInputElement).value,
                    job_description_text: (document.getElementById('re_jd') as HTMLTextAreaElement).value,
                    candidate_career_summary: (document.getElementById('re_summary') as HTMLTextAreaElement).value
                  };
                  if (!b.job_title || !b.company_name || !b.job_description_text || !b.candidate_career_summary) {
                    alert('Fill required fields.'); return;
                  }
                  try {
                    const res = await createResume(b);
                    const html = `
                      <div class="space-y-3">
                        <div><span class="font-medium">Summary:</span><div class="mt-1">${res.summary || ''}</div></div>
                        <div><span class="font-medium">Experience Bullets:</span><ul class="list-disc pl-5">${(res.experience_bullets||[]).map((x)=>`<li>${x}</li>`).join('')}</ul></div>
                        <div><span class="font-medium">Skills:</span><div class="mt-1">${(res.skills||[]).join(', ')}</div></div>
                      </div>
                    `;
                    const el = document.getElementById('re_output')!;
                    el.innerHTML = html;
                    el.scrollIntoView({ behavior: 'smooth' });
                  } catch {
                    alert('Failed to generate resume content.');
                  }
                }}
              >Generate</Button>
              <Button
                variant="secondary"
                client:only="react"
                onClick={() => {
                  const el = document.getElementById('re_output');
                  if (!el) return;
                  const range = document.createRange();
                  range.selectNode(el);
                  const sel = window.getSelection();
                  sel?.removeAllRanges();
                  sel?.addRange(range);
                  document.execCommand('copy');
                  sel?.removeAllRanges();
                  alert('Copied resume content to clipboard.');
                }}
              >Copy</Button>
            </div>
            <div id="re_output" class="prose mt-2 max-w-none rounded border p-3 text-sm"></div>
          </section>
        </div>
      </CardContent>
    </Card>

  </div>
</AdminLayout>
