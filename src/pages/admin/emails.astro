---
import AdminLayout from '../../layouts/AdminLayout.astro';

const url = new URL(Astro.request.url);
const page = Number(url.searchParams.get('page') || 1);
const limit = Number(url.searchParams.get('limit') || 25);
const from_email = url.searchParams.get('from_email') || '';
const start_date = url.searchParams.get('start_date') || '';
const end_date = url.searchParams.get('end_date') || '';

let emailLogsData = null;
let emailConfigsData = null;
let loadError = null;

// Get API token from env
const apiToken = import.meta.env.PUBLIC_API_TOKEN || 'demo-token';

try {
  // Fetch email logs with filters
  const logsParams = new URLSearchParams({
    page: page.toString(),
    limit: limit.toString(),
    ...(from_email && { from_email }),
    ...(start_date && { start_date }),
    ...(end_date && { end_date }),
  });

  const [logsResponse, configsResponse] = await Promise.all([
    fetch(`${url.origin}/api/email-logs?${logsParams}`),
    fetch(`${url.origin}/api/email-config`)
  ]);

  if (logsResponse.ok) {
    emailLogsData = await logsResponse.json();
  }
  
  if (configsResponse.ok) {
    emailConfigsData = await configsResponse.json();
  }
} catch (e) {
  loadError = e;
  console.error('Error loading email data:', e);
}

const emailLogs = emailLogsData?.email_logs || [];
const pagination = emailLogsData?.pagination || { page: 1, limit: 25, total: 0, pages: 0 };
const emailConfigs = emailConfigsData?.email_configs || [];

function qs(next: Record<string, string | number | undefined>) {
  const u = new URL(Astro.request.url);
  Object.entries(next).forEach(([k, v]) => {
    if (v === undefined || v === '') u.searchParams.delete(k);
    else u.searchParams.set(k, String(v));
  });
  return `${u.pathname}?${u.searchParams.toString()}`;
}
---

<AdminLayout>
  <div class="space-y-6">
    <!-- Header -->
    <div class="mb-6">
      <h1 class="text-2xl font-bold text-gray-900">Email Ingestion</h1>
      <p class="mt-1 text-sm text-gray-600">
        Monitor email processing and manage ingestion configurations
      </p>
    </div>

    <!-- Error State -->
    {loadError && (
      <div class="rounded-md bg-red-50 p-4">
        <div class="flex">
          <div class="ml-3">
            <h3 class="text-sm font-medium text-red-800">Error loading email data</h3>
            <div class="mt-2 text-sm text-red-700">
              <p>Failed to fetch email logs and configurations. Please check your API connection.</p>
            </div>
          </div>
        </div>
      </div>
    )}

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-4">
      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
              </svg>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Total Emails</dt>
                <dd class="text-lg font-medium text-gray-900">{pagination.total}</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Active Configs</dt>
                <dd class="text-lg font-medium text-gray-900">{emailConfigs.length}</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
              </svg>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Links Extracted</dt>
                <dd class="text-lg font-medium text-gray-900">
                  {emailLogs.reduce((sum, log) => sum + (log.job_links_extracted || 0), 0)}
                </dd>
              </dl>
            </div>
          </div>
        </div>
      </div>

      <div class="bg-white overflow-hidden shadow rounded-lg">
        <div class="p-5">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-6 w-6 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
            <div class="ml-5 w-0 flex-1">
              <dl>
                <dt class="text-sm font-medium text-gray-500 truncate">Jobs Processed</dt>
                <dd class="text-lg font-medium text-gray-900">
                  {emailLogs.reduce((sum, log) => sum + (log.jobs_processed || 0), 0)}
                </dd>
              </dl>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Tabs Navigation -->
    <div class="border-b border-gray-200">
      <nav class="-mb-px flex space-x-8" aria-label="Tabs">
        <button
          type="button"
          class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm tab-button"
          data-tab="logs"
        >
          Email Logs
        </button>
        <button
          type="button"
          class="border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm tab-button"
          data-tab="configs"
        >
          Configurations
        </button>
      </nav>
    </div>

    <!-- Email Logs Tab -->
    <div id="logs-tab" class="tab-content">
      <!-- Filters -->
      <div class="bg-white shadow rounded-lg p-6 mb-6">
        <form method="GET" class="grid grid-cols-1 gap-4 sm:grid-cols-4">
          <div>
            <label for="from_email" class="block text-sm font-medium text-gray-700">From Email</label>
            <input
              type="text"
              name="from_email"
              id="from_email"
              value={from_email}
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              placeholder="Filter by sender"
            />
          </div>
          
          <div>
            <label for="start_date" class="block text-sm font-medium text-gray-700">Start Date</label>
            <input
              type="date"
              name="start_date"
              id="start_date"
              value={start_date}
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          
          <div>
            <label for="end_date" class="block text-sm font-medium text-gray-700">End Date</label>
            <input
              type="date"
              name="end_date"
              id="end_date"
              value={end_date}
              class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          
          <div class="flex items-end">
            <button
              type="submit"
              class="w-full bg-indigo-600 border border-transparent rounded-md shadow-sm py-2 px-4 inline-flex justify-center text-sm font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            >
              Filter
            </button>
          </div>
        </form>
      </div>

      <!-- Email Logs Table -->
      <div class="bg-white shadow rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg leading-6 font-medium text-gray-900">Email Processing Logs</h3>
          <p class="mt-1 max-w-2xl text-sm text-gray-500">
            Recent email ingestion activity and processing results
          </p>
        </div>
        
        <div id="email-logs-container">
          <!-- React component will be mounted here -->
        </div>

        <!-- Pagination -->
        {pagination.pages > 1 && (
          <div class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
            <div class="flex-1 flex justify-between sm:hidden">
              {pagination.page > 1 && (
                <a
                  href={qs({ page: pagination.page - 1 })}
                  class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  Previous
                </a>
              )}
              {pagination.page < pagination.pages && (
                <a
                  href={qs({ page: pagination.page + 1 })}
                  class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                >
                  Next
                </a>
              )}
            </div>
            <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
              <div>
                <p class="text-sm text-gray-700">
                  Showing
                  <span class="font-medium">{((pagination.page - 1) * pagination.limit) + 1}</span>
                  to
                  <span class="font-medium">{Math.min(pagination.page * pagination.limit, pagination.total)}</span>
                  of
                  <span class="font-medium">{pagination.total}</span>
                  results
                </p>
              </div>
              <div>
                <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                  {pagination.page > 1 && (
                    <a
                      href={qs({ page: pagination.page - 1 })}
                      class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                    >
                      Previous
                    </a>
                  )}
                  {pagination.page < pagination.pages && (
                    <a
                      href={qs({ page: pagination.page + 1 })}
                      class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                    >
                      Next
                    </a>
                  )}
                </nav>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>

    <!-- Email Configs Tab -->
    <div id="configs-tab" class="tab-content hidden">
      <div id="email-configs-container">
        <!-- React component will be mounted here -->
      </div>
    </div>
  </div>

  <script>
    // Tab switching functionality
    document.addEventListener('DOMContentLoaded', function() {
      const tabButtons = document.querySelectorAll('.tab-button');
      const tabContents = document.querySelectorAll('.tab-content');

      // Set default active tab
      document.querySelector('[data-tab="logs"]').classList.add('border-indigo-500', 'text-indigo-600');
      document.querySelector('[data-tab="logs"]').classList.remove('border-transparent', 'text-gray-500');

      tabButtons.forEach(button => {
        button.addEventListener('click', function() {
          const targetTab = this.getAttribute('data-tab');
          
          // Reset all tabs
          tabButtons.forEach(btn => {
            btn.classList.remove('border-indigo-500', 'text-indigo-600');
            btn.classList.add('border-transparent', 'text-gray-500');
          });
          
          tabContents.forEach(content => {
            content.classList.add('hidden');
          });
          
          // Activate selected tab
          this.classList.add('border-indigo-500', 'text-indigo-600');
          this.classList.remove('border-transparent', 'text-gray-500');
          document.getElementById(targetTab + '-tab').classList.remove('hidden');
        });
      });
    });

    // Mount React components when ready
    import('/src/components/admin/email-logs-table.tsx').then(module => {
      const emailLogsData = {JSON.stringify(emailLogs)};
      // Mount email logs table component
      // This would be handled by Astro's React integration
    });

    import('/src/components/admin/email-config-manager.tsx').then(module => {
      const apiToken = {JSON.stringify(apiToken)};
      // Mount email config manager component
      // This would be handled by Astro's React integration
    });
  </script>
</AdminLayout>