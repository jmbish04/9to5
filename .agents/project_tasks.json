{
  "project": {
    "name": "9to5-Scout Frontend + Platform Roadmap",
    "version": "1.0.0",
    "owner": "Justin",
    "description": "Production-ready 9to5-Scout UI on Cloudflare Pages, integrated with the existing multi-phase platform roadmap."
  },
  "goals": [
    "Ship a production-ready, typed UI for the 9to5-Scout worker at https://9to5-scout.hacolby.workers.dev",
    "Make applicant onboarding effortless: paste text, upload Markdown/resume; the agent handles parsing",
    "Expose job discovery + monitoring with compressed tracking timeline (stable periods + change points)",
    "Enable human-in-the-loop prioritization (interested / not now) without losing any data capture",
    "Be deployable on Cloudflare Pages with clean CI and minimal vendor lock gotchas"
  ],
  "environments": {
    "runtime": "Cloudflare Pages (static hosting) + XHR to the Worker",
    "access_model": "Cloudflare Access in front of the Worker; frontend sends no Authorization headers",
    "bindings_reference": [
      "Workers AI (text, embeddings)",
      "Browser Rendering API (rendered DOM)",
      "D1 (relational store)",
      "R2 (snapshots: html/pdf/md/png)",
      "KV (ephemeral flags, UI hints)",
      "Vectorize (semantic search powering /api/agent/query)"
    ]
  },
  "api_map": {
    "health": "GET /api/health",
    "openapi": "GET /openapi.json",
    "jobs_list": "GET /api/jobs?limit&offset&status&source",
    "job_by_id": "GET /api/jobs/{id}",
    "job_tracking": "GET /api/jobs/{id}/tracking",
    "job_snapshot_content": "GET /api/jobs/{id}/snapshots/{snapshotId}/content?type=html|markdown|pdf|json|screenshot",
    "job_monitoring_update": "PUT /api/jobs/{id}/monitoring",
    "monitoring_status": "GET /api/monitoring/status",
    "monitoring_daily_run": "POST /api/monitoring/daily-run",
    "monitoring_queue": "GET /api/jobs/monitoring-queue?limit",
    "discovery_run": "POST /api/runs/discovery",
    "monitor_run": "POST /api/runs/monitor",
    "semantic_search": "GET /api/agent/query?q=...",
    "cover_letter": "POST /api/cover-letter",
    "resume": "POST /api/resume",
    "email_logs": "GET /api/email/logs?limit",
    "email_configs_get": "GET /api/email/configs",
    "email_configs_put": "PUT /api/email/configs",
    "email_insights_send": "POST /api/email/insights/send",
    "agents_crud": "GET/POST /api/agents, GET/PUT/DELETE /api/agents/{id}",
    "tasks_crud": "GET/POST /api/tasks, GET/PUT/DELETE /api/tasks/{id}",
    "workflows_crud": "GET/POST /api/workflows, GET/PUT/DELETE /api/workflows/{id}",
    "workflows_execute": "POST /api/workflows/{id}/execute",
    "applicant_submit_history": "POST /api/applicant/history",
    "applicant_get_history": "GET /api/applicant/{user_id}/history",
    "applicant_job_rating": "POST /api/applicant/job-rating",
    "applicant_job_ratings": "GET /api/applicant/{user_id}/job-ratings"
  },
  "common_gotchas": [
    "Do NOT import Node-only modules (fs, path, crypto randomBytes, net, tls) in client code or Astro islands.",
    "Cloudflare Pages serves static assets; all dynamic data must be fetched from the Worker origin via fetch.",
    "Avoid absolute imports that assume Node resolution. Use Vite aliases configured in tsconfig/astro config.",
    "Use ESM everywhere. No require().",
    "CORS: prefer same-site calls (direct to workers.dev or custom domain). If adding custom domain, update API_BASE.",
    "Do NOT bake secrets into the frontend. Cloudflare Access protects the Worker; no Authorization header needed.",
    "R2 files may be large. For PDF/PNG, open in new tab or stream; never inline huge base64 in the DOM.",
    "The Browser Rendering API is quota-limited; UIs should trigger runs, not render pages themselves.",
    "D1 is transactional but lightweight; keep queries lean, index-aware; use backend pagination params.",
    "Long lists: always paginate (limit/offset) and show loading skeletons.",
    "Snapshot HTML: render inside a sandboxed container. For raw HTML, use a dedicated iframe-like component (CSS scoped).",
    "Shadcn components: keep them local if CLI can‚Äôt run in CI. Match names/structure so later we can replace with CLI output.",
    "Never block UI on AI endpoints; show progress states and allow cancel/retry.",
    "Dates: always format in the user‚Äôs TZ (America/Los_Angeles). Use date-fns.",
    "Persist UI filters (status/source/limit) in URL query params for deep-linking.",
    "For interest signals (üëç/üëé), store UI state locally if backend endpoint doesn‚Äôt exist; feature-flag server sync later.",
    "Use AbortController to cancel inflight fetches when filters change rapidly.",
    "Keep bundles small: split routes, lazy-load heavy React islands (client:load where appropriate)."
  ],
  "phases": [
    {
      "phase_id": "P0",
      "name": "Scout Frontend on Cloudflare Pages",
      "duration_weeks": 6,
      "description": "Frontend-first milestone to ship a typed UI against the live Worker.",
      "epics": [
        {
          "epic_id": "P0.E1",
          "title": "Foundation: Types, API client, UI Kit, Layout",
          "success_criteria": [
            "openapi.json checked into public/; types generated to src/lib/types/openapi.ts",
            "Typed API client covering monitoring, jobs, applicant history",
            "shadcn/ui (or local equivalents) ready: Button, Card, Table, Dialog, Select, Input, Textarea, Badge, Skeleton",
            "App shell with sidebar nav (Dashboard, Jobs, Applicant, Agents, Tasks, Workflows)"
          ],
          "tasks": [
            {
              "id": "task-01-01",
              "title": "Wire OpenAPI types and typed API client",
              "steps": [
                "Add dev dep: openapi-typescript; script: \"types:api\" ‚Üí src/lib/types/openapi.ts",
                "Create src/lib/api.ts with API_BASE='https://9to5-scout.hacolby.workers.dev'",
                "Implement http<T>() wrapper + errors",
                "Map endpoints by operationId; export typed fns (monitoring, jobs, applicant, cover-letter/resume, email, semantic search)"
              ],
              "acceptance_criteria": [
                "pnpm types:api passes",
                "All API fns typed; /api/health smoke succeeds"
              ]
            },
            {
              "id": "task-01-02",
              "title": "UI kit + App shell",
              "steps": [
                "Stub shadcn/ui under src/components/ui/*",
                "AppShell.tsx (topbar + collapsible sidebar), AdminLayout.astro"
              ],
              "acceptance_criteria": [
                "Sidebar collapses on mobile",
                "Dark mode readable"
              ]
            }
          ]
        },
        {
          "epic_id": "P0.E2",
          "title": "Dashboard (/admin): Monitoring, Activity, Market Stats",
          "success_criteria": [
            "Monitoring status KPIs",
            "Recent activity table",
            "Market stats by role/location",
            "POST /api/monitoring/daily-run trigger"
          ]
        },
        {
          "epic_id": "P0.E3",
          "title": "Jobs (/admin/jobs) with Filters, Pagination, and Source Badges",
          "success_criteria": [
            "List: Title, Company, Location, Employment Type, Status, Source",
            "Filters: status, source; pagination with URL state",
            "Source badges and accessible deep links"
          ]
        },
        {
          "epic_id": "P0.E4",
          "title": "Job Detail with Compressed Tracking & Snapshot Viewer",
          "success_criteria": [
            "Compressed stable windows + change points",
            "Snapshot viewer (html/md inline; pdf/png new tab)",
            "Monitoring settings dialog (PUT /api/jobs/{id}/monitoring)"
          ]
        },
        {
          "epic_id": "P0.E5",
          "title": "Applicant Profile & AI Tools",
          "success_criteria": [
            "Paste/upload-anything history ingestion",
            "Display parsed history",
            "Generate cover letter & resume with previews",
            "Job fit rating on job detail"
          ]
        },
        {
          "epic_id": "P0.E6",
          "title": "Discovery Controls, Monitoring Queue, Interest Signals",
          "success_criteria": [
            "Trigger discovery/monitor",
            "Monitoring queue view",
            "Client-only Interested/Not Now flags with future sync"
          ]
        },
        {
          "epic_id": "P0.E7",
          "title": "Admin: Agents, Tasks, Workflows (CRUD + Execute)",
          "success_criteria": [
            "Agents CRUD",
            "Tasks CRUD with agent filter",
            "Workflows CRUD + Execute"
          ]
        },
        {
          "epic_id": "P0.E8",
          "title": "Email Ingestion Observability",
          "success_criteria": [
            "Email logs table",
            "Email configs get/update"
          ]
        },
        {
          "epic_id": "P0.E9",
          "title": "Search & Company Views",
          "success_criteria": [
            "Semantic search page (GET /api/agent/query)",
            "Company view: grouped counts + status breakdown"
          ]
        }
      ]
    },

    {
      "phase_id": "P1",
      "name": "Core Platform Foundation",
      "duration_weeks": 12,
      "source": "Imported from uploaded roadmap; see file for detailed epics/tasks",
      "reference": "9to5 Scout - AI-Powered Job Discovery Platform (E1.1‚ÄìE1.4: Foundation, Discovery UI, Tracking & Monitoring, Profiles & Onboarding)"
    },
    {
      "phase_id": "P2",
      "name": "AI Integration & Intelligence",
      "duration_weeks": 12,
      "source": "Imported from uploaded roadmap; see file for detailed epics/tasks",
      "reference": "E2.1‚ÄìE2.2 (Intelligent Matching, AI Content Generation)"
    },
    {
      "phase_id": "P3",
      "name": "Advanced Features & Analytics",
      "duration_weeks": 12,
      "source": "Imported from uploaded roadmap; see file for detailed epics/tasks",
      "reference": "E3.1 (Market Intelligence Platform)"
    },
    {
      "phase_id": "P4",
      "name": "Platform Optimization & Scale",
      "duration_weeks": 12,
      "source": "Imported from uploaded roadmap; see file for detailed epics/tasks",
      "reference": "E4.1 (Performance Optimization)"
    }
  ],
  "ui_patterns": {
    "badges": {
      "source": { "SCRAPED": "info", "EMAIL": "accent", "MANUAL": "secondary" },
      "change_type": { "content": "default", "status": "warning", "salary": "purple", "closed": "destructive" },
      "recommendation": { "Strong Match": "success", "Good Fit": "info", "Consider": "warning", "Pass": "secondary" }
    },
    "loading": "Skeleton components for cards/tables; spinners for actions",
    "errors": "Inline message + toast; preserve last good data until refresh completes",
    "responsiveness": "Cards stack on mobile; tables scroll with sticky headers"
  },
  "telemetry_and_qol": {
    "local_prefs": [
      "Remember jobs table page size (limit) and filters",
      "Interest flags per job (localStorage) until server endpoint exists",
      "Feature flags: SYNC_PREFERENCES, SHOW_MONITORING_QUEUE"
    ],
    "a11y": [
      "Keyboard focus rings on all actionable elements",
      "Visually-hidden labels for badges"
    ]
  },
  "deliverables": [
    "public/openapi.json",
    "src/lib/types/openapi.ts",
    "src/lib/api.ts",
    "src/components/ui/*",
    "src/components/app/AppShell.tsx",
    "src/layouts/AdminLayout.astro",
    "src/pages/admin/index.astro",
    "src/pages/admin/jobs.astro",
    "src/pages/admin/jobs/[id].astro",
    "src/pages/admin/applicant.astro",
    "src/pages/admin/agents.astro",
    "src/pages/admin/tasks.astro",
    "src/pages/admin/workflows.astro",
    "src/pages/admin/search.astro (optional)",
    "src/pages/admin/monitoring-queue.astro (optional)"
  ],
  "acceptance_tests": [
    "User can paste Markdown resume into Applicant page and see parsed entries returned",
    "Dashboard KPIs render within 1s with skeletons during load",
    "Jobs list filter by source=status updates URL and data without page reloads",
    "Job detail shows compressed 15-day stable window correctly",
    "Snapshot HTML renders in modal; PDF opens in new tab",
    "Monitoring PUT updates reflected on refetch",
    "Cover letter and resume endpoints return content; copy buttons work",
    "Semantic search ranks jobs and shows relevance_score",
    "No console errors; Lighthouse best practices ‚â• 95"
  ],
  "ci_cd": {
    "build": "npm run build (Astro) ‚Üí dist/",
    "preview": "npm run preview",
    "pages_deploy": "Cloudflare Pages with Astro preset; no server-side adapters required",
    "checks": [
      "Typecheck (tsc --noEmit)",
      "Lint (eslint, prettier)",
      "Basic vitest for utilities (optional)"
    ]
  },
  "platform_roadmap_reference": {
    "source_file": "project_tasks.json (uploaded)",
    "notes": "Full platform phases (P1‚ÄìP4), dependencies, resources, quality gates, testing strategy, risk assessment, success metrics, deployment, maintenance, documentation are unchanged and remain authoritative.",
    "citation": "See uploaded file for all detailed tasks and metrics."
  }
}
